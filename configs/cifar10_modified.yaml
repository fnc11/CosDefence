# FL_DATA
DATASET: "cifar10"
CLIENT_FRAC: 0.1 # client fraction to select in each round 0.1|0.2|0.4|1.0
POISON_FRAC: 0.4 # poisoned fraction for environment 0.0|0.1|0.2|0.4
CREATE_DATASET: True # if true it creates FL Dataset
CLASS_RATIO: 10 # class ratio in client data distribution, choose 1|4|10


# FL_SETTINGS
MODEL: "basic_cnn1" # model to be used
LEARNING_RATE: 0.001 # client's model learning rate
BATCH_SIZE: 32 # client model parameter
LOCAL_EPOCHS: 3 # epochs to run before clients send back the model update
OPTIMIZER: "adam" # client model parameter
FED_ROUNDS: 200 # federated rounds to run
TEST_EVERY: 1 # test the model for accuracy after every 3rd round
RANDOM: False # to select candidates randomly or with fixed seed 42 


# COS_DEFENCE_SETTINGS
COS_DEFENCE: True # to turn on cos_defence
SEL_METHOD: 1  # Client selection method, 0: total_random, 1: system_trust as probability, 2: top k clients according to system_trust
COLLAB_MODE: True  # collaboration mode on means, all validation clients jointly assign trust
CONSIDER_LAYERS: "f1l1"  # choose layers for grad collection f2|f1|f1l1|l1|l2|all
GRAD_AGG: True   # Collect all gradients over the iterations or just use last iteration grads
FEATURE_FINDING_ALGO: auror  # use Auror's cluster algo to find important neural units in the layers, other options none|auror_plus
GRAD_COLLECTION_START: 0   # when to start collecting grads 
GRAD_COLLECT_FOR: -1   #for how many fed rounds grads are collected, -1 means selected based on client_frac 
CLUSTER_SEP: 4.0   # parameter for Auror's cluster algo, how much seperation between clusters to consider them important
ALPHA: 0.5   # parameter for updating system trust vector
BETA: 0.5    # parameter for updating system trust matrix
GAMMA: 0.5   # decides how much initial trust worthy clients in the environment
TRUST_INC: 2
TRUST_CUT_METHOD: 0  # 0 for using clustering method to segregate, 1 for using median, mean, std method
HONEST_PARDON_FACTOR: 0.8 # it decides how much you want to pardon good clients getting bad trust values


# LOG
LOG_LEVEL: 'DEBUG' # To make logs based on logging level, DEBUG|INFO|WARNING|ERROR|CRITICAL
JSON_RESULTS: True  # whether to save results, they are saved in json files for later visualization

